import subprocess
import os

from plumbum import local
from mkcrowbar import paths, base
from mkcrowbar.pretty import fatal


class Setup(base.App):
    DESCRIPTION = 'Configure crowbar'

    def exec(self):
        if not os.path.exists(paths.crowbar_installer()):
            fatal('Could not find the installer', exit=False)
            fatal('Maybe you missed to prepare the environment before running setup')

        restart = False
        process = self.run_installer_process()

        with self.step('Prepare system for the installer') as s:
            s.task('Cleanup environment')
            self.make_clean()
            s.done()

            s.task('Create /etc/sysconfig/clock if not exists')
            self.set_clock_settings()

            s.success('Cleanup complete')

        with self.step('Running the installer') as s:

            for output in process.stdout:
                line = output.decode('utf-8').strip()

                self.show(line)

                if line.startswith('==='):
                    s.task(line[4:])

                # A special case when the installer fails (namely when
                # checking the repositories) and set the install status to
                # failed. This results in trying to clean a not initializes
                # sqlite database.
                if line.startswith('Error: no such table: proposals'):
                    s.fail('It looks like the installer broke the last time and created a invalid state', exit=False)
                    s.fail('Restarting the installer and removing locks', exit=False)
                    process.communicate()
                    os.remove(paths.crowbar_installer_state('failed'))
                    restart = True
                    break

                # The script catches an error
                if line.startswith('Error:'):
                    s.fail(line, exit=False)
                    self.premature_error(s, process)

                # The script terminates gracefully
                if line.startswith('Crowbar installation terminated prematurely.'):
                    s.fail('Installer script failed unexpected.', exit=False)
                    s.fail('To check what happend check the logfile in /var/log/crowbar/install.log')

                # The script aborts
                if line.startswith('Aborting: '):
                    s.fail(line, exit=False)
                    s.fail('Installation aborted.')

                # Installation complete
                if line.startswith('Admin node deployed'):
                    self.show_success(s, process)

        if restart:
            self.exec()

    def run_installer_process(self):
        return subprocess.Popen(paths.crowbar_installer() + " --verbose",
                                stdout=subprocess.PIPE,
                                stderr=subprocess.STDOUT,
                                stdin=subprocess.PIPE,
                                shell=True)

    def premature_error(self, step, process):
        for description in process.stdout:
            desc = description.decode('utf-8').strip()
            if desc.startswith('Crowbar installation terminated prematurely.'):
                break
            step.fail(desc, exit=False)

        step.fail('Installation aborted.')

    def show_success(self, step, process):
        for message in process.stdout:
            msg = message.decode('utf-8').strip()
            step.success(msg)


    def set_clock_settings(self):
        if not os.path.exists('/etc/sysconfig/clock'):
            self.show('/etc/sysconfig/clock does not exists. Creating new')
            with open('/etc/sysconfig/clock', 'w') as clock:
                clock.write('TIMEZONE="{}"\n'.format(self.config.get('timezone', 'Europe/Berlin')))
                clock.write('DEFAULT_TIMEZONE="US/Eastern"\n')

    def make_clean(self):

        # remove existing /root/.chef/knife.rb
        # This file is generated by install-chef-suse.sh and causes a bad error
        # if not removed before restart
        if os.path.exists('/root/.chef/knife.rb'):

            # We need to remove all non chef related clients
            knife = local['knife']['client', '-y', 'bulk', 'delete', "^(?!chef-).+"]
            status = knife.run(retcode=None)
            if status[0] != 0:
                fatal('Could not remove chef clients')

            os.remove('/root/.chef/knife.rb')
